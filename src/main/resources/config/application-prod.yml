# ===================================================================
# Spring Boot configuration for the "prod" profile.
#
# This configuration overrides the application.yml file.
#
# More information on profiles: https://www.jhipster.tech/profiles/
# More information on configuration properties: https://www.jhipster.tech/common-application-properties/
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================

logging:
  level:
    ROOT: INFO
    tech.jhipster: INFO
    org.hibernate.SQL: INFO
    vn.softdreams.easypos: INFO
  logback:
    rollingpolicy:
      max-file-size: 50MB

management:
  metrics:
    export:
      prometheus:
        enabled: false

spring:
  devtools:
    restart:
      enabled: false
    livereload:
      enabled: false
  datasource:
    type: com.microsoft.sqlserver.jdbc.SQLServerDataSource
    url: jdbc:sqlserver://10.100.112.107:1433;databaseName=easyposbackoffice;encrypt=true;trustServerCertificate=true;
    username: sa
    password: EaSyPos@2022SDs
    hikari:
      poolName: Hikari
      auto-commit: false
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
      maximumPoolSize: 100
      minimumIdle: 20
      maxLifetime: 1800000
      idleTimeout: 180000
      connectionTimeout: 200000
  datasourceReadOnly:
    type: com.microsoft.sqlserver.jdbc.SQLServerDataSource
    url: jdbc:sqlserver://10.100.112.107:1433;databaseName=easyposbackoffice;encrypt=true;trustServerCertificate=true;applicationIntent=ReadOnly;
    username: sa
    password: EaSyPos@2022SDs
    hikari:
      poolName: Hikari
      auto-commit: false
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
      maximumPoolSize: 100
      minimumIdle: 20
      maxLifetime: 1800000
      idleTimeout: 180000
      connectionTimeout: 200000
  jpa:
  # Replace by 'prod, faker' to add the faker context and have sample data loaded in production
  liquibase:
    contexts: prod
    enabled: false
  mail:
    host: mail.softdreams.vn
    port: 465
    username: easypos-noreply@softdreams.vn
    password: 123456Aa@
    properties:
      mail:
        smtp:
          auth: true
          ssl:
            enable: true
  thymeleaf:
    cache: true
  servlet:
    multipart:
      max-request-size: 10MB
      max-file-size: 10MB
  rabbitmq:
    host: 172.16.12.100
    virtual-host: /
    username: admin
    password: RaBBitmQ2022SDS
    ngogiaphatinvoice:
      ngp-check-invoice-queue: ngp-check-invoice
      ngp-check-invoice-routing-key: ngp-routing-check-invoice
      ngp-import-invoice-queue: ngp-import-invoice
      ngp-import-invoice-routing-key: ngp-routing-import-invoice
      ngp-issue-invoice-queue: ngp-issue-invoice
      ngp-issue-invoice-routing-key: ngp-routing-issue-invoice
      ngp-replace-invoice-queue: ngp-replace-invoice
      ngp-replace-invoice-routing-key: ngp-routing-replace-invoice
      ngp-cancel-invoice-queue: ngp-cancel-invoice
      ngp-cancel-invoice-routing-key: ngp-routing-cancel-invoice
    easyinvoice:
      issue-invoice-queue: issue-invoice
      issue-invoice-routing-key: easypos-issue-invoice
      check-invoice-queue: check-invoice
      check-invoice-routing-key: easypos-check-invoice
      replace-invoice-queue: replace-invoice
      replace-invoice-routing-key: easypos-replace-invoice
      import-invoice-queue: import-invoice
      import-invoice-routing-key: easypos-cancel-invoice
      cancel-invoice-queue: cancel-invoice
      cancel-invoice-routing-key: easypos-cancel-invoice
    easybooks88:
      send-queue: send-eb88
      send-routing-key: easypos-send-eb88
    consumer:
      max-concurrent-consumer: 2
      concurrent-consumer: 2
      prefetch-count: 10
    producer:
      reply-timeout: 60000
      direct-exchange: amq.direct
  main:
    allow-circular-references: true
# ===================================================================
# To enable TLS in production, generate a certificate using:
# keytool -genkey -alias easypos -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore keystore.p12 -validity 3650
#
# You can also use Let's Encrypt:
# See details in topic "Create a Java Keystore (.JKS) from Let's Encrypt Certificates" on https://maximilian-boehm.com/en-gb/blog
#
# Then, modify the server.ssl properties so your "server" configuration looks like:
#
# server:
#   port: 443
#   ssl:
#     key-store: classpath:config/tls/keystore.p12
#     key-store-password: password
#     key-store-type: PKCS12
#     key-alias: selfsigned
#     # The ciphers suite enforce the security by deactivating some old and deprecated SSL cipher, this list was tested against SSL Labs (https://www.ssllabs.com/ssltest/)
#     ciphers: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 ,TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,TLS_RSA_WITH_CAMELLIA_256_CBC_SHA,TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,TLS_RSA_WITH_CAMELLIA_128_CBC_SHA
# ===================================================================
server:
  port: 80
  shutdown: graceful # see https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-graceful-shutdown
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,application/javascript,application/json,image/svg+xml
    min-response-size: 1024

# ===================================================================
# JHipster specific properties
#
# Full reference is available at: https://www.jhipster.tech/common-application-properties/
# ===================================================================

jhipster:
  http:
    cache: # Used by the CachingHttpHeadersFilter
      timeToLiveInDays: 1461
  security:
    authentication:
      jwt:
        # This token must be encoded using Base64 and be at least 256 bits long (you can type `openssl rand -base64 64` on your command line to generate a 512 bits one)
        # As this is the PRODUCTION configuration, you MUST change the default key, and store it securely:
        # - In the JHipster Registry (which includes a Spring Cloud Config server)
        # - In a separate `application-prod.yml` file, in the same folder as your executable JAR file
        # - In the `JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET` environment variable
        base64-secret: NDdiMDQ3Njg3NjNkMjJjYTVhMDQyNDgwNjhhZjFjOGIxZTQ4OGJkMTE1Mzk5YTcxMWVkY2JiMjU2YzQxZWM4ZmJiZDU0MTZjODJkYWE5MGU0ZDAyNDNiNWViZjJkYWIxYmY2OGZhMjQyOWY4ODJjNTZmYzIxN2ViOTY4OThkNTQ=
        # Token is valid 24 hours
        token-validity-in-seconds: 86400
        token-validity-in-seconds-for-remember-me: 2592000
  mail: # specific JHipster mail property, for standard properties see MailProperties
    base-url: http://my-server-url-to-change # Modify according to your server's URL
  logging:
    use-json-format: false # By default, logs are not in Json format
    logstash: # Forward logs to logstash over a socket, used by LoggingConfiguration
      enabled: false
      host: localhost
      port: 5000
      queue-size: 512
# ===================================================================
# Application specific properties
# Add your own application properties here, see the ApplicationProperties class
# to have type-safe configuration, like in the JHipsterProperties above
#
# More documentation is available at:
# https://www.jhipster.tech/common-application-properties/
# ===================================================================

# application:
